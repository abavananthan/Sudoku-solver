/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <stdio.h>

void rowcheck(int array[4][4], int row[4][4]){
    int i, j, k;
    for(i=1; i<5; ++i){
        for(k=0; k<4; ++k){
            for(j=0; j<4; ++j){
                if(array[k][j]==i){
                    row[k][i-1]=1; j=5;
                }
            }
        }
    }
    
    printf("The array after checking the rows look like this: \n");
    for(i=0; i<4; ++i){
        for(j=0; j<4; ++j){
            printf("%d ", row[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

void columncheck(int array[4][4], int column[4][4]){
    int i, j, k;
    for(i=1; i<5; ++i){
        for(k=0; k<4; ++k){
            for(j=0; j<4; ++j){
                if(array[k][j]==i){
                    column[j][i-1]=1; j=5;
                }
            }
        }
    }
    
    printf("The array after checking the columns look like this: \n");
    for(i=0; i<4; ++i){
        for(j=0; j<4; ++j){
            printf("%d ", column[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

void quadrantcheck(int array[4][4], int quadrant[4][4]){
    int i, j, k;
    for(i=1; i<5; ++i){
        for(k=0; k<4; ++k){
            for(j=0; j<4; ++j){
                if(array[k][j]==i){
                    if(k<2){
                        if(j<2){
                            quadrant[0][i-1]=1; j=5;
                        }
                        else if(j>1){
                            quadrant[1][i-1]=1; j=5;
                        }
                    }
                    
                    else if(k>1){
                        if(j<2){
                            quadrant[2][i-1]=1; j=5;
                        }
                        else if(j>1){
                            quadrant[3][i-1]=1; j=5;
                        }
                    }
                }
            }
        }
    }
    
    printf("The array after checking the quadrants look like this: \n");
    for(i=0; i<4; ++i){
        for(j=0; j<4; ++j){
            printf("%d ", quadrant[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

void combination_creator_row(int combination[4][16], int i, int array[4][4], int row[4][4], int column[4][4], int quadrant[4][4]){
    int j, k, l;
    for(j=0; j<4; ++j){
        if(array[i][j]>0){
            for(k=0; k<4; ++k){
                combination[k][j+4*i]=0;
            }
        }
        else if(array[i][j]==0){
            for(l=0; l<4; ++l){
                if(row[i][l]==0 && column[j][l]==0){
                    if(i<2){
                        if(j<2){
                            if(quadrant[0][l]==0){
                                combination[l][j+4*i]=1;
                            }
                            else if(quadrant[0][l]==1){
                                combination[l][j+4*i]=0;
                            }
                        }
                        else if(j>1){
                            if(quadrant[1][l]==0){
                                combination[l][j+4*i]=1;
                            }
                            else if(quadrant[1][l]==1){
                                combination[l][j+4*i]=0;
                            }
                        }
                    }
                    
                    else if(i>1){
                        if(j<2){
                            if(quadrant[2][l]==0){
                                combination[l][j+4*i]=1;
                            }
                            else if(quadrant[2][l]==1){
                                combination[l][j+4*i]=0;
                            }
                        }
                        else if(j>1){
                            if(quadrant[3][l]==0){
                                combination[l][j+4*i]=1;
                            }
                            else if(quadrant[3][l]==1){
                                combination[l][j+4*i]=0;
                            }
                        }
                    }
                }
                
                else if(row[i][l]==1 || column[j][l]==1){
                    combination[l][j+4*i]=0;
                }
            }
        }
    }
}

void number_counter(int *one, int *two, int *three, int *four, int array[4][4]){
    int i, j;
    for(i=0; i<4; ++i){
        for(j=0; j<4; ++j){
            if(array[i][j]==1){
                *one-=1;
            }
            else if(array[i][j]==2){
                *two-=1;
            }
            else if(array[i][j]==3){
                *three-=1;
            }
            else if(array[i][j]==4){
                *four-=1;
            }
        }
    }
}

int main()
{
    int array[4][4], i, j, k, count[4]={4, 4, 4, 4}, original[4][4], row[4][4]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, column[4][4]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, quadrant[4][4]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}, combination[4][16];
    for(i=0; i<4; ++i){
        for(j=0; j<4; ++j){
            printf("Enter a number from the puzzle here in cell[%d][%d]: \n", i, j);
            scanf("%d", &array[i][j]);
            original[i][j]=array[i][j];
        }
    }
    
    number_counter(&count[0], &count[1], &count[2], &count[3], array);
    printf("The number of ones needed in this puzzle: %d!\n", count[0]);
    printf("The number of twos needed in this puzzle: %d!\n", count[1]);
    printf("The number of threes needed in this puzzle: %d!\n", count[2]);
    printf("The number of fours needed in this puzzle: %d!\n", count[3]);
    
    rowcheck(array, row); columncheck(array, column); quadrantcheck(array, quadrant);
    
    for(i=0; i<4; ++i){
        for(j=0; j<16; ++j){
            combination[i][j]=0;
        }
    }
    
    printf("The combination table of each number(row 1 in the table is 1, row 2 is 2, and onwards); for each row, looks like this: \n");
    for(i=0; i<4; ++i){
        combination_creator_row(combination, i, array, row, column, quadrant);
        printf("Row %d's combination table looks like this: \n", i+1);
        for(j=0; j<4; ++j){
            for(k=0; k<4; ++k){
                printf("%d ", combination[j][k+4*i]);
            }
            printf("\n");
        }
        printf("\n");
    }
    
    printf("The final result for the inputted sudoku puzzle is as follows: \n");
    
    for(i=0; i<4; ++i){
        for(j=0; j<4; ++j){
            printf("%d ", array[i][j]);
        }
        printf("\n");
    }
    
    return 0;
}
